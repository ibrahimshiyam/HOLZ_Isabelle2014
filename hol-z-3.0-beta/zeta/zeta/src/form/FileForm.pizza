package zeta.form;

/**
 * The class of file selector forms. <p>
 *
 * A file form represents file input.
 *
 * @version $Id: FileForm.pizza,v 1.3 1998/10/27 11:04:19 wg Exp $
 * @author Wolfgang Grieskamp (wg@cs.tu-berlin.de) */

import java.io.File;
import zeta.session.*;

public class FileForm extends Form {

  /** The state of the file form. */
  public final State state;

  /** The class of file form states. */
  public static class State extends FormState {
    public case State(File file);
  }

  /** The mode of the file form. */
  public final Mode mode;

  /** The class of file form modes. */
  public static class Mode {
    /** Some arbitrary file name. */
    public case PLAIN;
    /** Must be existent regular file. */
    public case EXFILE;
    /** Must be existent directory. */
    public case EXDIRECTORY;
  }

  /** 
   * Construct a file form from a mode and state.
   */
  public FileForm(Mode mode, State state){
    this.mode = mode;
    this.state = state;
  }

  /**
   * Parse the given sequence of words starting at index. Takes
   * the first word in the sequence and stores it in the state.
   * According to mode, existence of a file or directory is checked,
   * and an exception may be thrown.
   */
  public int parse(Session session, Locator locator,
		   String[] words, int start) 
  throws Failures.FormFailed {
    if (start < words.length){
      File file = new File(words[start]);
      switch (mode){
      case EXFILE:
	if (!file.isFile()) {
	  session.send(locator.getTool(),
		       new Diag(locator,
				Diag.Category.Error,
				"file `" + file + "' does not exists"));
	  throw new Failures.FormFailed("FileForm");
	}
	break;
      case EXDIRECTORY:
	if (!file.isDirectory()){
	  session.send(locator.getTool(),
		       new Diag(locator,
				Diag.Category.Error,
				"directory `" + file + "' does not exists"));
	  throw new Failures.FormFailed("FileForm");
	}
      }
      state.file = file;
      return start+1;
    } else
      return -1;
  }

  /**
   * Unparse the internal state of the form. Returns the name of the
   * file.
   */
  public String[] unparse(Session session){
    return new String[]{state.file != null ? state.file.toString() : ""};
  }

  /**
   * Get syntax description
   */
  public String getSyntax(){
    return "<FILENAME>";
  }

}
