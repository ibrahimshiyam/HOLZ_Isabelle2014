package zeta.form;

/**
 * The class of choice forms. <p>
 *
 * A choice form represents a choice from a set of subforms.
 *
 * @version $Id: ChoiceForm.pizza,v 1.3 1998/10/27 11:04:14 wg Exp $
 * @author Wolfgang Grieskamp (wg@cs.tu-berlin.de) */

import zeta.session.*;

public class ChoiceForm extends CompoundForm {

  /** The subforms of the choice form. */
  public final Form[] subforms;

  /** A display style for this choice form. */
  public Style style = Style.TABBEDPANE;

  /** The class of display styles for choice forms. */
  public static class Style {
    /** Radio button style. */
    public case RADIOBUTTON;
    /** Tabbed pane. */
    public case TABBEDPANE;
  }

  /** The state of this choice form. */
  public final State state;

  /** The class of states for choice forms. */
  public static class State extends FormState {
    public case State(int selection);
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(State state, Form[] subforms){
    this.subforms = subforms;
    this.state = state;
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(Form[] subforms){
    this(new State(0), subforms);
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(State state, Form subform1, Form subform2){
    this(state, new Form[]{subform1, subform2});
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(State state, Form subform1, Form subform2, Form subform3){
    this(state, new Form[]{subform1, subform2, subform3});
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(State state, Form subform1, Form subform2, 
		    Form subform3, Form subform4){
    this(state, new Form[]{subform1, subform2, subform3, subform4});
  }

  /** 
   * Construct a choice form.
   */
  public ChoiceForm(State state, Form subform1, Form subform2, 
		 Form subform3, Form subform4, Form subform5){
    this(state, new Form[]{subform1, subform2, subform3, subform4, subform5});
  }

  /**
   * Set style of choice form. Returns this form.
   */
  public ChoiceForm style(Style style){
    this.style = style;
    return this;
  }
    
  /**
   * Parse the given sequence of words starting at index. 
   */
  public int parse(Session session, Locator locator,
		   String[] words, int start)
  throws Failures.FormFailed {
    for (int i = 0; i < subforms.length; i++){
      int start1 = subforms[i].parse(session, locator, words, start);
      if (start1 >= 0){
	// select this path
	int old = state.selection;
	state.selection = i;
	if (old != state.selection) state.notifyChange(this);
	return start1;
      }
    }
    return -1;
  }
  
  /**
   * Unparse the internal state of the form. 
   */
  public String[] unparse(Session session){
    if (state.selection >= 0 && state.selection < subforms.length)
      return subforms[state.selection].unparse(session);
    else
      throw new Errors.AssertionFailed("invalid state of choice form");
  }

  /**
   * Return the direct subforms.
   */
  public Form[] getSubforms(){
    return subforms;
  }

  /**
   * Get syntax description
   */
  public String getSyntax(){
    StringBuffer res = new StringBuffer("( ");
    for (int i = 0; i < subforms.length; i++){
      if (i > 0) res.append(" | ");
      res.append(subforms[i].getSyntax());
    }
    res.append(" )");
    return res.toString();
  }

}
