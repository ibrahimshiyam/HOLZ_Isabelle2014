package zeta.agl;

/** Implementation variant of sequences using arrays as the internal
  * representation.  <p>
  *
  * This variant of sequences is nearly as fast as Pizza/Java arrays,
  * as far as index-based operations are concerned. Methods such as
  * insertion and slicing are relative fast, since they are realized
  * by the native array method <code>System.arraycopy</code>. <p>
  *
  * Storage economy is as for arrays (no ``holes'' in the representing
  * array).  However, array sequences of primitive objects such as booleans
  * have to be expected to be stored as Java arrays of their boxed
  * counterparts, unless they are constructed from a given array of
  * primitives.  <p>
  *
  *
  * @version $Id: ArraySeq.pizza,v 1.2 2000/03/13 06:57:11 wg Exp $
  * */

import java.util.NoSuchElementException;
import java.lang.IndexOutOfBoundsException;

import java.io.*;

public class ArraySeq<A> extends Seq<A> {

  /** The elements. */
  A[] elems;

  /** Construct an empty sequence. */
  public ArraySeq(){ 
    this(0);
  }

  /** Construct a singelton sequence. */
  public ArraySeq(A e1){ 
    this(1);
    elems[0] = e1;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2){ 
    this(2);
    elems[0] = e1;
    elems[1] = e2;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3){
    this(3);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3, A e4){
    this(4);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
    elems[3] = e4;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3, A e4, A e5){
    this(5);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
    elems[3] = e4;
    elems[4] = e5;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3, A e4, A e5, A e6){
    this(6);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
    elems[3] = e4;
    elems[4] = e5;
    elems[5] = e6;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3, A e4, A e5, A e6, A e7){
    this(7);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
    elems[3] = e4;
    elems[4] = e5;
    elems[5] = e6;
    elems[6] = e7;
  }

  /** Construct a sequence with elements. */
  public ArraySeq(A e1, A e2, A e3, A e4, A e5, A e6, A e7, A e8){
    this(8);
    elems[0] = e1;
    elems[1] = e2;
    elems[2] = e3;
    elems[3] = e4;
    elems[4] = e5;
    elems[5] = e6;
    elems[6] = e7;
    elems[7] = e8;
  }

  /** Construct a sequence from an array. The array is embedded by
    * reference into the array sequence, that is becomes its internal
    * representation. The effect of later indirect updates on the
    * given array is not specified. */
  public ArraySeq(A[] array){
    elems = array;
  }

  /** Construct a sequence of given size which contains at the
    * the <code>i</code>th element the result of calling
    * <code>f(i)</code>.
    */
  public ArraySeq(int size, (int)->A f){
    elems = Util.arrayalloc(size);
    for (int i = 0; i < size; i++){
      elems[i] = f(i);
    }
  }

  /** Construct a array sequence which contains the enumerated elements of
    * another aggregate. This static method is optimized according to
    * the actual representation of the other aggregate.  In particular,
    * if the other aggregate is an array sequence again, it is simply
    * returned. */
  public static <A> Seq<A> from(Aggregate<A> other){
    if (other instanceof ArraySeq) {
      return (ArraySeq)other;
    } else {
      A[] elems = Util.arrayalloc(other.size());
      int i = 0;
      for (Enum<A> enum = other.enumerate(); enum.more(); enum.advance()){
	elems[i] = enum.current();
	i++;
      }
      return new ArraySeq(elems);
    }
  }

  /** Construct a array sequence with undetermined elements of the given size. 
    * Only for members of this package. */
  ArraySeq(int size){
    elems = Util.arrayalloc(size);
  }

  /** Implementation of <code>Aggregate</code> method. */
  public Enum<A> enumerate(){
    // return new ArraySeqEnum(elems);
    return new Enum<A>() {
      private int index = 0;
      public boolean more(){
	return index < elems.length;
      }
      public A current() throws NoSuchElementException {
	if (index < elems.length)
	  return elems[index];
	else
	  throw new NoSuchElementException();
      }
      public void advance(){
	index++;
      }
    };
  }

  /*
  static private class ArraySeqEnum implements Enum<A> {
    private A[] elems;
    private int index = 0;
    private ArraySeqEnum(A[] elems){
      this.elems = elems;
    } 
    public boolean more(){
      return index < elems.length;
    }
    public A current() throws NoSuchElementException {
      if (index < elems.length)
	return elems[index];
      else
	throw new NoSuchElementException();
    }
    public void advance(){
      index++;
    }
  }
  */
    

  /** Implementation of <code>Aggregate</code> method. */
  public int size(){
    return elems.length;
  }

  /** Implementation of <code>Seq</code> method. */
  public A head() throws IndexOutOfBoundsException {
    return at(0);
  }

  /** Implementation of <code>Seq</code> method. */
  public A at(int index) throws IndexOutOfBoundsException {
    try {
      return elems[index];
    }
    catch (IndexOutOfBoundsException e){
      throw new IndexOutOfBoundsException(index+"th");
    }
  }
      
  /** Implementation of <code>Seq</code> method. */
  public Seq<A> insertAll(int at, Aggregate<A> other) 
  throws IndexOutOfBoundsException {
    if (at < 0 || at > elems.length) 
      throw new IndexOutOfBoundsException(at+"th");
    int l = other.size();
    A[] newelems = Util.arrayalloc(elems.length + l);
    if (at > 0)
      Util.arraycopy(elems, 0, newelems, 0 , at);
    if (other instanceof ArraySeq){
      Util.arraycopy(((ArraySeq)other).elems,0,newelems,at,l);
    } else {
      int i = at;
      for (Enum<A> enum = other.enumerate(); enum.more(); enum.advance()){
	newelems[i] = enum.current();
	i++;
      }
    }
    if (at < elems.length)
      Util.arraycopy(elems,at,newelems,at+l,elems.length-at);
    return new ArraySeq(newelems);
  }

  /** Implementation of <code>Seq</code> method. */
  public Seq<A> subseq(int at, int end)
  throws IndexOutOfBoundsException{
    if (at < 0 || at > elems.length) 
      throw new IndexOutOfBoundsException(at+"th");
    if (end < 0 || end > elems.length) 
      throw new IndexOutOfBoundsException(end+"th");
    if (at >= end)
      return new ArraySeq();
    else {
      A[] newelems = Util.arrayalloc(end-at);
      Util.arraycopy(elems,at,newelems,0,end-at);
      return new ArraySeq(newelems);
    }
  }

  /** Implementation of <code>Seq</code> method. */
  public Seq<A> subseq(int at, int end, (A)->boolean p)
  throws IndexOutOfBoundsException{
    if (at < 0 || at > elems.length) 
      throw new IndexOutOfBoundsException(at+"th");
    if (end < 0 || end > elems.length) 
      throw new IndexOutOfBoundsException(end+"th");
    if (at >= end){
      return new ArraySeq();
    } else {
      A[] newelems = Util.arrayalloc(end-at);
      int i;
      for (i = at; i < end && p(elems[i]); i++){
	newelems[i] = elems[i];
      }
      if (i < newelems.length){
	A[] finalelems = Util.arrayalloc(i);
	Util.arraycopy(newelems,0,finalelems,0,i);
	return new ArraySeq(finalelems);
      } else {
	return new ArraySeq(newelems);
      }
    }
  }

  /** Implementation of <code>Seq</code> method. */
  public Seq<A> sort((A,A)-> int ecompare){
    A[] newelems = Util.arrayalloc(elems.length);
    Util.arraycopy(elems,0,newelems,0,elems.length);
    QuickSort<A> sorter = new QuickSort(newelems, ecompare);
    sorter.run();
    return new ArraySeq(newelems);
  }

  /** Implementation of <code>Seq</code> method. */
  private static class QuickSort<B>{
    // FIXME: inserted by cut and paste, check for correctness
    private final B[] AR;
    private final (B,B)->int ecompare;
    QuickSort(B[] AR, (B,B)->int ecompare){
      this.AR = AR; this.ecompare = ecompare;
    }
    void run(){
      run(0,AR.length-1);
    }
    private void run(int fst, int lst){
      if(fst >= lst) return;
      B swap, pivot = AR[fst];
      int i = fst-1, j = lst+1;
      while(i < j) {
	while(ecompare(pivot,AR[++i]) > 0);	        // pivot > AR[i]
	while(ecompare(pivot, AR[--j]) < 0);	        // pivot < AR[j]
	if(i < j) {
	  swap = AR[i];
	  AR[i] = AR[j];
	  AR[j] = swap;
	}
      }
      run(fst, j);
      run(j+1, lst);
    }
  }

  /** Implementation of <code>Seq</code> method. */
  public Seq<A> revert(){
    A[] newelems = Util.arrayalloc(elems.length);
    int i = 0; int j = elems.length-1;
    while (i < newelems.length){
      newelems[i] = elems[j];
      i++; j--;
    }
    return new ArraySeq(newelems);
  }

  /** Implementation of <code>Seq</code> method. */
  public <B> Seq<B> map((A)->B f){
    B[] newelems = Util.arrayalloc(elems.length);
    for (int i = 0; i < newelems.length; i++){
      newelems[i] = f(elems[i]);
    }
    return new ArraySeq(newelems);
  }

  /** Implementation of <code>Seq</code> method. */
  public Seq<A> filter((A)->boolean p){
    A[] newelems = Util.arrayalloc(elems.length);
    int j = 0;
    for (int i = 0; i < elems.length; i++){
      if (p(elems[i])){
	newelems[j] = elems[i];
	j++;
      }
    }
    if (j < newelems.length){
      A[] finalelems = Util.arrayalloc(j);
      Util.arraycopy(newelems,0,finalelems,0,j);
      return new ArraySeq(finalelems);
    } else {
      return new ArraySeq(newelems);
    }
  }

  /** Implementation of <code>Serializable</code> method. */
  private void writeObject(ObjectOutputStream out)
  throws IOException {
    out.writeObject((Object)elems);
  }

  /** Implementation of <code>Serializable</code> method. */
  private void readObject(ObjectInputStream in)
  throws IOException,ClassNotFoundException {
    elems = (A[])ArrayHacks.readArray(in);
  }

    

  

}
