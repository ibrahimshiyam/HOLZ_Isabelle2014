package zeta.agl;

/** The abstract superclass of all aggregate classes.
  * It provides methods with default implementations for
  * traversing the contents of an aggregate. 
  *
  * @version $Id: Aggregate.pizza,v 1.1.1.1 1998/09/01 10:51:10 wg Exp $
  */

import java.util.NoSuchElementException;
import zeta.format.*;
import zeta.format.impl.*; // FIXME: remove references
import zeta.agl.Enum;
import java.io.StringWriter;
import java.io.PrintWriter;

public abstract class Aggregate<A> implements Formattable {

  /** Return enumeration of elements of aggregate. */
  public abstract Enum<A> enumerate();

  /** Test if aggregate is empty. */
  public boolean isEmpty(){
    return size() == 0;
  }

  /** Return number of elements in aggregate. */
  public int size(){
    int sz = 0;
    for (Enum<A> e = enumerate(); e.more(); e.advance()){
      sz++;
    }
    return sz;
  }

//  /** Retrieve some (arbitrary) element from the aggregate.
  // * @exception  NoSuchElementException if aggregate is empty.
  // */
  //public A arb() throws NoSuchElementException {
  //  return enumerate().current();
  //}
  
  /** Reduce elements of aggregate.
    * <pre> 
    *  AGG{x1, x2, ..., xn}.reduce(z, f) = f(...f(f(z,x1), x2)..., xn)
    * </pre>
    * Reduction order is determined by enumeration order.
    */
  public <B> B reduce(B z, (B,A)->B f){
    Enum<A> e = enumerate();
    while (e.more()){
      z = f(z,e.current());
      e.advance();
    }
    return z;
  }

  /** Reduce elements of aggregates, passing the position of the 
    * reduced element.
    * <pre> 
    *  AGG{x1, x2, ..., xn}.reduceWithPos(z, f) = 
    *        f(...f(f(z,0, x1), 1, x2)..., n-1, xn)
    * </pre>
    * Reduction order is determined by enumeration order.
    */
  public <B> B reduceWithPos(B z, (B,int, A)->B f){
    Enum<A> e = enumerate();
    int i = 0;
    while (e.more()){
      z = f(z,i, e.current());
      e.advance();
      i++;
    }
    return z;
  }



  /** Fold elements of aggregate. 
    * <pre> 
    *  AGG{x1, x2, ..., xn}.fold(f) = f(...f(x1, x2)..., xn)
    *  AGG{x1}.fold(f) = x1
    * </pre>
    * Folding order is determined by enumeration order.
    * @throws NoSuchElementException if aggregate is empty
    */
  public A fold((A,A)->A f) throws NoSuchElementException{
    Enum<A> e = enumerate();
    A x = e.current();
    e.advance();
    while (e.more()){
      x = f(x,e.current());
      e.advance();
    }
    return x;
  }

  // problems with pc 0.39c
  //  /** Reduce elements of aggregates, where reduction function may
  //    * throw an exception. */
  // public <B> B tryReduce(B z, (B,A) throws Exception->B f) throws Exception {
  //    Enum<A> e = enumerate();
  //    while (e.more()){
  //      z = f(z,e.current());
  //      e.advance();
  //    }
  //    return z;
  //  }
  

  /** Apply function with side-effects to all elements. */
  public void apply((A)->void f){ 
    Enum<A> e = enumerate();
    while (e.more()){
      f(e.current());
      e.advance();
    }
  }

  /** Test if boolean function holds for all elements. */
  public boolean forall((A)->boolean f){
    Enum<A> e = enumerate();
    while (e.more()){
      if (!f(e.current())) return false;
      e.advance();
    }
    return true;
  }

  /** Test if their exists an element for which boolean function holds. */
  public boolean exists((A)->boolean f){
    Enum<A> e = enumerate();
    while (e.more()){
      if (f(e.current())) return true;
      e.advance();
    }
    return false;
  }

  /** Equality of aggregates according to their enumerated elements.
    * Two aggregates are equal, if their elements in order as enumerated
    * are equal. Specializations of aggregates which don't care about
    * the order (such as sets) may refine the notion of equality. */
  public boolean equals(Object other){
    if (!(other instanceof Aggregate)){
      return false;
    } else {
      return equalsAgg(this, (Aggregate)other);
    }
  }

  private static <B> boolean equalsAgg(Aggregate<A> a1, Aggregate<B> a2){
    Enum<A> e1 = a1.enumerate();
    Enum<B> e2 = a2.enumerate();
    while (e1.more() && e2.more()){
      if ( ((Object)e1.current()).equals((Object)e2.current()) ){
	e1.advance(); e2.advance();
      } else {
	return false;
      }
    }
    return !e1.more() && !e2.more();
  }

  /** Hashcode of aggregates, defined as a sum of some of its
    * elements. This hashcode function is compatible with the
    * generic equality on aggregates, based on their enumeration. */
  public int hashCode(){
    Enum<A> e = enumerate();
    int n = 0;
    int hash = 0;
    while (e.more() && n <= 5){
      hash += ((Object)e.current()).hashCode();
      e.advance();
      n++;
    }
    return hash;
  }
    

  /** Lexicographical ordering of aggregates according to their enumerated
    * elements. Produces a total order, provided the
    * element ordering is total. Note, however, that this total ordering
    * does not necessarily coincides with semantic equality. This is
    * only the case if
    * <pre>
    * x === y ==> x.enumerate() === y.enumerate()
    * </pre>
    * @see zeta.agl.Ordered */
  public int compare((A,A)-> int ecompare, Aggregate<A> other){
    Enum<A> e = enumerate(); Enum<A> o = other.enumerate();
    while (e.more() && o.more()){
      int c = ecompare(e.current(),o.current());
      if (c != 0) return c;
      e.advance(); o.advance();
    }
    if (e.more()) return -1;
    else if (o.more()) return 1;
    else return 0;
  }


  /** Generate a default format for the contents of the aggregate. */
  public Format toFormat(FormatInfo info){
    int ref;
    if (info.visited(this)) {
      return new FormatText("<"+info.visitNumber(this)+">");
    } else { // never visited before
      ref = info.visit(this);
    }
    String className = getClass().getName();
    int di = className.lastIndexOf(".");
    if (di >= 0) className = className.substring(di+1);
    className = className.replace('$','.');
    return new FormatLine(new Format[]{
      new FormatText("<" + ref + ">" + className),
      new FormatAppend(new Format[]{
	new FormatText("{"),
	toFormatLine(new FormatText(","), 
		     fun (A elem)->Format 
		     {
		       return Format.buildFormat(info, (Object)elem);
		     }),
	  new FormatText("}")})});
  }

  /** Generate a block format for aggregate putting the elements beneath. */
  public Format toFormatBeneath(int indent,
				Format separator,
				(A)->Format formatter){
    int n = size();
    Format[] buf = new Format[n];
    Enum<A> e = enumerate();
    int i = 0;
    while (e.more()){
      Format fmt = formatter(e.current());
      if (i == n-1) {
	buf[i] = fmt;
      } else {
	buf[i] = new FormatAppend(new Format[]{fmt, separator});
      }
      i++;
      e.advance();
    }
    return new FormatBeneath(indent, buf);
  }

  /** Generate a block format for aggregate putting the elements beneath. */
  public Format toFormatBeneath(int indent,
				(A)->Format formatter){
    Format[] buf = new Format[size()];
    Enum<A> e = enumerate();
    int i = 0;
    while (e.more()){
      buf[i] = formatter(e.current());
      i++;
      e.advance();
    }
    return new FormatBeneath(indent, buf);
  }

  /** Generate a block format for aggregate putting the elements beside. */
  public Format toFormatLine(Format separator,
			       (A)->Format formatter){
    int n = size();
    Format[] buf = new Format[n];
    Enum<A> e = enumerate();
    int i = 0;
    while (e.more()){
      Format fmt = formatter(e.current());
      if (i == n-1) {
	buf[i] = fmt;
      } else {
	buf[i] = new FormatAppend(new Format[]{fmt, separator});
      }
      i++;
      e.advance();
    }
    return new FormatBlock(buf);
  }

  /** Generate a block format for aggregate putting the elements beside. */
  public Format toFormatLine((A)->Format formatter){
    Format[] buf = new Format[size()];
    Enum<A> e = enumerate();
    int i = 0;
    while (e.more()){
      buf[i] = formatter(e.current());
      i++;
      e.advance();
    }
    return new FormatBlock(buf);
  }

      
			       
  /** Return an array holding enumerated elements of aggregate.
    * The principal type of the elements have to be given as a parameter. */
  public A[] toArray(Class clazz){
    A[] arr = (A[])ArrayHacks.allocArray(size(), clazz);
    int i = 0;
    for (Enum<A> e = enumerate(); e.more(); e.advance()){
      arr[i] = e.current();
      i++;
    }
    return arr;
  }

  /** Copy enumerated elements of aggregate into an array. */
  public void copyInto(A[] array){
    copyInto(array, 0);
  }

  /** Copy enumerated elements of aggregate into an array starting
    * at given array position. */
  public void copyInto(A[] array, int pos){
    for (Enum<A> e = enumerate(); e.more(); e.advance()){
      array[pos++] = e.current();
    }
  }
    
    


  /** Return a string representing this aggregate. By default, this
    * method calls toFormat() and calls the pretty printer to produce
    * the string. */
  public String toString(){
    StringWriter writer = new StringWriter();
    Format.buildFormat(this).printFormat(new PrintWriter(writer), 70);
    return writer.toString();
  }
    
  /** Compact this aggregate. This method has no semantic effect, but
    * for some aggregate implementations it frees auxiliary memory
    * allocated for the internal representation.  */
  public void compact(){
  }
}



