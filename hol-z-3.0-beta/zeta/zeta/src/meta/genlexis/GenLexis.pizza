
package zeta.meta.genlexis;

import java.io.*;
import java.util.StringTokenizer;
import net.sf.pizzacompiler.lang.Pair;
import zeta.agl.*;
import zeta.format.*;
import zeta.format.impl.*;

public class GenLexis {

  public static void main(String args[]){
    if (args.length <= 1){
      System.out.println("usage: genlexis <LEXTABLE> <PATCHFILE> ...");
      System.exit(1);
    }
    try {
      Parser parser = new Parser(new java.io.FileInputStream(args[0]));
      parser.lexTable();

      Seq<String> languagesSeq =
	new ArraySeq(parser.languages).map(flatten);
      Set<String> languages = HashSet.from(languagesSeq);

      Seq<LexSpec> lexTable =
	new ArraySeq(parser.table).map(makeLexSpec(languagesSeq));

      // System.out.println(lexTable);

      Substitution subs = new Substitution();
      subs.define("CASES",
		  new CaseGenerator(languages, lexTable).gen);
      subs.define("TOSTRING",
		  new ToStringGenerator(languages, lexTable).gen);
      subs.define("TOIMAGE",
		  new ToImageGenerator(languages, lexTable).gen);
      subs.define("TOKEN",
		  new TokenGenerator(languages, lexTable).gen);
      subs.define("TOKENRULE",
		  new TokenRuleGenerator(languages, lexTable).gen);
      subs.define("TOTOKENKIND",
		  new ToTokenKindGenerator(languages, lexTable).gen);
      subs.define("LEFTOFFSIDE",
		  new FlagGenerator(languages, lexTable,
				    LexSpec.LOFFSIDE).gen);
      subs.define("RIGHTOFFSIDE",
		  new FlagGenerator(languages, lexTable,
				    LexSpec.ROFFSIDE).gen);
      
      for (int i = 1; i < args.length; i++){
	subs.applyToFile(new File(args[i]));
      }
    }
    catch (ParseException e){
      System.out.println("syntax error: " + e.getMessage());
    }
    catch (IOException e){
      System.out.println("I/O error: " + e.getMessage());
    }
  }

  static private (String[][])->LexSpec makeLexSpec(Seq<String> langs){
    return fun (String[][] line)->LexSpec{
      String pizzaCase = flatten(line[0]);
      String absLang = flatten(line[1]);
      String comment = flatten(line[2]);
      Map<String,Pair<String,Set<int>>> reprs = new HashMap();
      for (int i = 3; i < line.length; i++){
	if (i-3 < langs.size()){
	  reprs = reprs.define(langs.at(i-3), 
			       makeToken(flattenQ(line[i], false)));
	} else {
	  System.out.println("Warning: ignoring `" + flattenQ(line[i], false)
			                           + "'");
	}
      }
      return new LexSpec(pizzaCase, absLang, comment, reprs);
    };
  }

  static private Pair<String,Set<int>> makeToken(String s){
    int q = s.lastIndexOf("\"");
    int i = s.lastIndexOf(":");
    if (i >= 0 && i > q){
      String repr = s.substring(0, i).trim();
      String flagsStr = s.substring(i+1).trim();
      Set<int> flags = new HashSet();
      for (i = 0; i < flagsStr.length(); i++){
	switch (flagsStr.charAt(i)){
	case 'L': 
	  flags = flags.include(LexSpec.LOFFSIDE);
	  continue;
	case 'R': 
	  flags = flags.include(LexSpec.ROFFSIDE);
	  continue;
	default:
	  System.out.println("Warning: ignoring unknown flag `" + 
			     flagsStr.charAt(i) + 
			     "' for token `" + repr + "'");
	}
      }
      return new Pair(repr, flags);
    } else {
      return new Pair(s, (Set)new HashSet());
    }
  }

  static private String flatten(String[] literals){
    return flattenQ(literals, true);
  }

  static private String flattenQ(String[] literals, boolean doUnquote){
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < literals.length; i++){
      if (i > 0) buf.append(" ");
      if (doUnquote)
	buf.append(unquote(literals[i]));
      else
	buf.append(literals[i]);
    }
    return buf.toString();
  }

  static private String unquote(String s){
    int n = s.length();
    if (n > 0){
      int i = s.charAt(0) == '\"' ? 1 : 0;
      int j = s.charAt(n-1) == '\"' ? n-1 : n;
      return s.substring(i,j);
    } else 
      return s;
  }

}

public class LexSpec {
  static final int LOFFSIDE = 0;
  static final int ROFFSIDE = 1;
  public case LexSpec(String pizzaCase,
	       String absLang,
	       String comment,
	       Map<String, Pair<String,Set<int>>> reprs);
}



class Substitution {

  Map<String,(String,int) throws IOException->String> methods = new HashMap();

  void define(String var, (String,int) throws IOException->String method){
    methods = methods.define(var, method);
  }

  void applyToFile(File file)
  throws IOException {
    File newFile = new File(file.getParent(), "genlexis.tmp");
    BufferedReader in = new BufferedReader(new FileReader(file));
    PrintWriter out = 
      new PrintWriter(new BufferedWriter(new FileWriter(newFile)));

    for (String line = in.readLine(); line != null; line = in.readLine()){

      // copy this line
      out.println(line);
      
      // looking for variable substitution starting in this line
      String var = null; 
      int restOfLine = -1; 
      int indent = -1;
      for (zeta.agl.Enum<String> e = methods.domain().enumerate(); 
	   e.more(); e.advance()){
	if ((restOfLine = line.indexOf("@@" + e.current())) >= 0){
	  restOfLine += 2 + e.current().length();
	  if (restOfLine == line.length() ||
	      Character.isSpaceChar(line.charAt(restOfLine))){
	    var = e.current();
	    for (indent = 0; 
		 indent < line.length()
		   && Character.isSpaceChar(line.charAt(indent));
		 indent++);
	    break;
	  }
	}
      }

      if (var != null){
	// Copy substitution to output
	out.println(methods.get(var)(line.substring(restOfLine), indent));
	// Skip input until end of variable substitution
	line = in.readLine();
	while (line != null && line.indexOf("@@END" + var) < 0){
	  line = in.readLine();
	}
	if (line != null) {
	  out.println(line);
	} else {
	  throw new IOException(file.getName() + 
				" ended while searching for " +
				"@@END" + var);
	}
      }
    }

    // cleanup
    in.close();
    out.close();
    file.delete();
    newFile.renameTo(file);
  }
}

class CaseGenerator {

  case CaseGenerator(Set<String> languages, Seq<LexSpec> table);

  String gen(String args, int indent)
  throws IOException {
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
	table.toFormatBeneath(0, new FormatBreak(), genCase)
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genCase(LexSpec spec){
    return 
      new FormatBeneath(new Format[]{
	  new FormatText("/** [" + spec.absLang + "] " + spec.comment + " */"),
			  Aux.makeCase(spec.pizzaCase)
			     });
  }

}

class ToStringGenerator {

  case ToStringGenerator(Set<String> languages, Seq<LexSpec> table);
  String lang = null;
  String target = null;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.size() != 2){
      throw new IOException(
        "concrete language and target variable as argument to TOSTRING required");
    }
    lang = args.at(0);
    target = args.at(1);
    if (!languages.contains(lang)){
      throw new IOException("concrete language `" + lang + 
			    "' as argument of TOSTRING unknown");
    }
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
				  // new FormatText("switch (lexem){"),
	table.toFormatBeneath(0, genMatch),
				  // new FormatText("}")
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genMatch(LexSpec spec) { // throws IOException {
    if (!spec.reprs.defines(lang)){
      System.out.println(spec.reprs.toString());
      // throw new IOException("language `" + lang + 
      throw new Error("language `" + lang + 
	    "' for lexem `" + spec.pizzaCase + "' has no representation");
    }
    String repr = spec.reprs.get(lang).fst;
    int i = repr.indexOf("\"");
    if (i >= 0) {
      int j = repr.indexOf("\"", i+1);
      if (j >= 0) 
	repr = repr.substring(0, j+1);
    }
    return 
      new FormatBeneath(new Format[]{
	Aux.makeMatch(spec.pizzaCase,
	  new FormatLine(new Format[]{
	    new FormatText(target + " = "),
	    new FormatText(spec.pizzaCase.indexOf("image)") >= 0 
			 ? "image.toString()"
			 : repr),
	    new FormatText(";")
	  })
        )
      });
  }

}

class ToImageGenerator {

  case ToImageGenerator(Set<String> languages, Seq<LexSpec> table);

  String target = null;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.size() != 1){
      throw new IOException(
        "target variable as argument to TOIMAGE required");
    }
    target = args.at(0);
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
				  // new FormatText("switch (lexem){"),
	table.toFormatBeneath(0, genMatch),
				  // new FormatText("}")
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genMatch(LexSpec spec) { 
    String cons = spec.pizzaCase;
    int i = cons.indexOf("(");
    if (i >= 0){
      cons = cons.substring(0,i);
    }
    return 
	Aux.makeMatch(spec.pizzaCase,
	  new FormatText(target + " = " + 
		 (i > 0 ? "image.toString();" : "\"<" + cons.toUpperCase() + ">\";"))
        );
  }

}

class ToTokenKindGenerator {

  case ToTokenKindGenerator(Set<String> languages, Seq<LexSpec> table);

  String target = null;
  Set<String> absLangs = null;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.size() < 1){
      throw new IOException(
        "target variable as argument to TOTOKENKIND required");
    }
    target = args.at(0);
    absLangs = HashSet.from(args.subseq(1));
    Seq<LexSpec> actTable;
    if (!absLangs.isEmpty()){
      actTable = table.filter(fun (LexSpec s)->boolean {
				return absLangs.contains(s.absLang);
			      });
    } else {
      actTable = table;
    }
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
				  // new FormatText("switch (lexem){"),
	actTable.toFormatBeneath(0, genMatch),
				  // new FormatText("}")
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genMatch(LexSpec spec) { 
    String cons = spec.pizzaCase;
    int i = cons.indexOf("(");
    if (i >= 0){
      cons = cons.substring(0,i);
    }
    return 
      new FormatBeneath(new Format[]{
	Aux.makeMatch(spec.pizzaCase,
	  new FormatLine(new Format[]{
	    new FormatText(target + " = " + cons.toUpperCase() + ";")
	  })
        )
      });
  }

}

class TokenGenerator {

  case TokenGenerator(Set<String> languages, Seq<LexSpec> table);
  String lang = null;
  Set<String> absLangs = null;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.size() < 1){
      throw new IOException(
        "concrete language as argument to TOKEN required");
    }
    lang = args.at(0);
    if (!languages.contains(lang)){
      throw new IOException("concrete language `" + lang + 
			    "' as argument of TOKEN unknown");
    }
    absLangs = HashSet.from(args.tail());
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
	table.toFormatBeneath(0, new FormatText("|"), genToken)
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genToken(LexSpec spec) { // throws IOException {
    if (!spec.reprs.defines(lang)){
      System.out.println(spec.reprs.toString());
      // throw new IOException("language `" + lang + 
      throw new Error("language `" + lang + 
	    "' for lexem `" + spec.pizzaCase + "' has no representation");
    }
    Pair<String,Set<int>> repr = spec.reprs.get(lang);
    String cons = spec.pizzaCase;
    int i = cons.indexOf("(");
    if (i >= 0){
      cons = cons.substring(0,i);
    }
    String tok;
    if (absLangs.isEmpty() || absLangs.contains(spec.absLang)){
      tok = repr.fst;
    } else {
      tok = "\"@_@\" " + repr.fst; // FIXME: there must be a better way to
                                    // deactivate token
    }
    return 
      new FormatBeside(new Format[]{
	new FormatText("<" + cons.toUpperCase() + " : "),
        new FormatText(tok),
	new FormatText(">")
      });
  }
}

class TokenRuleGenerator {

  case TokenRuleGenerator(Set<String> languages, Seq<LexSpec> table);

  String target;
  String lexemClass;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.isEmpty()){
      throw new IOException(
		  "target as argument to TOKENRULE required");
    }
    target = args.head();
    args = args.tail();
    if (args.size() > 0 && args.head().length() > 0){
      lexemClass = args.head() + ".";
      args = args.tail();
    } else {
      lexemClass = "";
      if (args.size() > 0) args = args.tail();
    }
    Set<String> absLangs = HashSet.from(args);
    Seq<LexSpec> actTable;
    if (!absLangs.isEmpty()){
      actTable = table.filter(fun (LexSpec s)->boolean {
				return absLangs.contains(s.absLang);
			      });
    } else {
      actTable = table;
    }
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
	actTable.toFormatBeneath(0, new FormatText("|"), genRule),
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genRule(LexSpec spec) { // throws IOException {
    String cons = spec.pizzaCase;
    int i = cons.indexOf("(");
    if (i >= 0){
      cons = cons.substring(0,i);
      return 
	new FormatText("tok = <" + cons.toUpperCase() + "> { " +
		       target + " = new " + lexemClass + 
		       cons + "(tok.image.toString()); }");
    } else {
      return 
	new FormatText("<" + cons.toUpperCase() + "> { " +
		       target + " = " + lexemClass + cons + "; }");
    }
  }
}

class FlagGenerator {

  case FlagGenerator(Set<String> languages, Seq<LexSpec> table,
		     int flag);

  private String lang = null;
  private String target = null;

  String gen(String arg, int indent)
  throws IOException {
    Seq<String> args = Aux.getArgs(arg);
    if (args.size() != 2){
      throw new IOException(
        "concrete language and target variable as argument to <FLAG> required");
    }
    lang = args.at(0);
    target = args.at(1);
    if (!languages.contains(lang)){
      throw new IOException("concrete language `" + lang + 
			    "' as argument of <FLAG> unknown");
    }
    Format fmt =
      new FormatBeneath(indent, new Format[]{
	new FormatText("// generated by genlexis:"),
	table.toFormatBeneath(0, genFlag),
      });
    StringWriter buf = new StringWriter();
    fmt.printFormat(new PrintWriter(buf), 75);
    return buf.toString();
  }

  private Format genFlag(LexSpec spec) { 
    if (!spec.reprs.defines(lang)){
      throw new Error("language `" + lang + 
	    "' for lexem `" + spec.pizzaCase + "' has no representation");
    }
    String cons = spec.pizzaCase;
    int i = cons.indexOf("(");
    if (i >= 0){
      cons = cons.substring(0,i);
    }
    return 
	Aux.makeMatch(spec.pizzaCase,
		      new FormatText(target + " = " + 
				     (spec.reprs.get(lang).snd
					  .contains(flag) ? 
				      "true;" : "false;")));
  }

}

class Aux {

  static Format makeCase(String cons){
    return 
      new FormatAppend(new Format[]{
	new FormatText("public case "),
	new FormatText(cons),
	new FormatText(";")
      });
  }

  static Format makeMatch(String cons, Format body){
    return 
      new FormatBeneath(new Format[]{
	new FormatText("case " + cons + ": "),
	new FormatBeneath(2, new Format[]{
	  body,
	  new FormatText("break;")
	})
      });
  }

  static Seq<String> getArgs(String s){
    StringTokenizer toks = new StringTokenizer(s, ",");
    Seq<String> args = new BufferSeq();
    while (toks.hasMoreTokens()){
      args = args.append(toks.nextToken().trim());
    }
    return args;
  }

}
