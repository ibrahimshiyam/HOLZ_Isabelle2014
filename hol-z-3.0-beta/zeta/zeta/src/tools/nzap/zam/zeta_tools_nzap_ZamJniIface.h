/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class zeta_tools_nzap_ZamJniIface */

#ifndef _Included_zeta_tools_nzap_ZamJniIface
#define _Included_zeta_tools_nzap_ZamJniIface
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: zamToolName */
#undef zeta_tools_nzap_ZamJniIface_SOLUTION
#define zeta_tools_nzap_ZamJniIface_SOLUTION 0L
#undef zeta_tools_nzap_ZamJniIface_MORE
#define zeta_tools_nzap_ZamJniIface_MORE 1L
#undef zeta_tools_nzap_ZamJniIface_NOMORE
#define zeta_tools_nzap_ZamJniIface_NOMORE 2L
#undef zeta_tools_nzap_ZamJniIface_UNDEF
#define zeta_tools_nzap_ZamJniIface_UNDEF 3L
/* Inaccessible static: impl */
/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    start
 * Signature: ([Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_zeta_tools_nzap_ZamJniIface_start
  (JNIEnv *, jobject, jobjectArray);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    step
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_zeta_tools_nzap_ZamJniIface_step
  (JNIEnv *, jobject, jint);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    possiblyMore
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_zeta_tools_nzap_ZamJniIface_possiblyMore
  (JNIEnv *, jobject);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    getBinding
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_getBinding
  (JNIEnv *, jobject, jstring);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    setSetTarget
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_setSetTarget
  (JNIEnv *, jobject, jstring);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    setTermTarget
 * Signature: (Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_setTermTarget
  (JNIEnv *, jobject, jstring, jint);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    setSeqTarget
 * Signature: (Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_setSeqTarget
  (JNIEnv *, jobject, jstring, jint);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    retSubTarget
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_zeta_tools_nzap_ZamJniIface_retSubTarget
  (JNIEnv *, jobject);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    isSet
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_zeta_tools_nzap_ZamJniIface_isSet
  (JNIEnv *, jobject, jstring);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    isSeqGet
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_zeta_tools_nzap_ZamJniIface_isSeqGet
  (JNIEnv *, jobject, jstring);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    isTermGet
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_isTermGet
  (JNIEnv *, jobject, jstring);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    profileInfo
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_zeta_tools_nzap_ZamJniIface_profileInfo
  (JNIEnv *, jobject);

/*
 * Class:     zeta_tools_nzap_ZamJniIface
 * Method:    noOfSteps
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_zeta_tools_nzap_ZamJniIface_noOfSteps
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
