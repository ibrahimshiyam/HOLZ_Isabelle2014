package zeta.tools.nzap;

/** Class for representing ZAM code.
  *
  * @version $Id: ZAM.pizza,v 1.9 2000/07/03 06:59:28 wg Exp $
  */

import java.io.*;
import zeta.format.*;
import zeta.agl.*;
import zeta.util.*;


public class ZAM {

  /** Opcodes. */
  static final byte LOAD = 1;
  static final byte LOADPARAM = 2;
  static final byte WAIT = 3;
  static final byte WAITLOAD = 4;
  static final byte STORE = 5;
  static final byte UNIFY = 6;
  static final byte MEMBER = 7;
  static final byte CALLNATIVE = 9;
  static final byte TESTNATIVE = 10;
  static final byte MKTERM = 11;
  static final byte MKVAR = 12;
  static final byte MKEMPTY = 13;
  static final byte MKINTEN = 14;
  static final byte MKSINGLE = 15;
  static final byte UNION = 16;
  static final byte ISECT = 17;
  static final byte GOTO = 18;
  static final byte IF = 19;
  static final byte IFNOT = 20;
  static final byte HOM = 21;
  static final byte FAILURE = 22;
  static final byte SUCCESS = 23;
  static final byte DEPTHFIRST = 24;
  static final byte UNDEF = 25;
  static final byte MKOUTERINTEN = 26;
  static final byte MKUNIV = 27;
  static final byte MKNUMBER = 28;
  static final byte LOADGLOBAL = 29;
  static final byte NOP = 31;
  static final byte MKDENO = 32;
  static final byte SUBSET = 33;
  static final byte WAITLOADGLOBAL = 34;
  static final byte WAITGLOBAL = 35;
  static final byte STOREGLOBAL = 36;
  static final byte APPLY = 37;
  static final byte APPLYGLOBAL = 38;
  static final byte UNIQMEMBER = 39;
  static final byte MOVE = 40;
  static final byte WAITLOADPARAM = 41;

  /** Writing integer parameters into the code stream. */
  static int writeInt(byte[] buffer, int start, int param){
    int i = 12;
    do {
      wrbuf[--i] = (byte)(param & 127);
      param >>= 7;
    }
    while (param != 0);
    wrbuf[11] |= 128;
    int count = 12-i;
    System.arraycopy(wrbuf, i, buffer, start, count);
    return start+count;
  }
  private final static byte[] wrbuf = new byte[12];

  /** Format byte code. */
  public static Format formatCode(byte[] code, int start, int end){
    CodeFormatter f = new CodeFormatter(code, start, end);
    while (f.pc < f.end) f.formatNext();
    return Format.beneath(f.instrs);
  }

  /** A class for formatting byte code. */
  static class CodeFormatter {
    case CodeFormatter(byte[] code, int pc, int end);
    Seq<Format> instrs = new BufferSeq();
    
    void formatNext(){
      int oldPc = pc;
      Format instr;
      switch (code[pc++]){
      case MKDENO:
	int di = readIndex();
	int ri = readIndex();
	instr = Format.literal("MKDENO d" + di + " -> r" + ri);
	break;
      case CALLNATIVE:
	int ni = readIndex();
	int pi = readIndex();
	int ri = readIndex();
	instr = Format.literal("CALLNATIVE n" + ni + " r" + pi + " -> r" + ri);
	break;
      case TESTNATIVE:
	int ni = readIndex();
	int pi = readIndex();
	instr = Format.literal("TESTNATIVE p" + ni + " r" + pi);
	break;
      case LOADGLOBAL:
	int ci = readIndex();
	int ri = readIndex();
	instr = Format.literal("LOADGLOBAL g" + ci + " -> r" + ri);
	break;
      case WAITLOADGLOBAL:
	int ci = readIndex();
	int ri = readIndex();
	instr = Format.literal("WAITLOADGLOBAL g" + ci + " -> r" + ri);
	break;
      case LOADPARAM:
	int vi = readIndex();
	int ri = readIndex();
	instr = Format.literal("LOADPARAM p" + vi + " -> r" + ri);
	break;
      case WAITLOADPARAM:
	int pi = readIndex();
	int ri = readIndex();
	instr = Format.literal("WAITLOADPARAM p" + pi + " -> r" + ri);
	break;
      case WAITGLOBAL:
	int vi = readIndex();
	instr = Format.literal("WAITGLOBAL g" + vi);
	break;
      case WAIT:
	int vi = readIndex();
	instr = Format.literal("WAIT v" + vi);
	break;
      case MOVE:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("MOVE r" + ri1 + " -> r" + ri2);
	break;
      case LOAD:
	int vi = readIndex();
	int ri = readIndex();
	instr = Format.literal("LOAD v" + vi + " -> r" + ri);
	break;
      case WAITLOAD:
	int vi = readIndex();
	int ri = readIndex();
	instr = Format.literal("WAITLOAD v" + vi + " -> r" + ri);
	break;
      case STORE:
	int ri = readIndex();
	int vi = readIndex();
	instr = Format.literal("STORE r" + ri + " -> v" + vi);
	break;
      case STOREGLOBAL:
	int ri = readIndex();
	int gi = readIndex();
	instr = Format.literal("STOREGLOBAL r" + ri + " -> g" + gi);
	break;
      case UNIFY:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("UNIFY r" + ri1 + ", r" + ri2);
	break;
      case MEMBER:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("MEMBER r" + ri1 + ", r" + ri2);
	break;
      case UNIQMEMBER:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("UNIQMEMBER r" + ri1 + ", r" + ri2);
	break;
      case SUBSET:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("SUBSET r" + ri1 + ", r" + ri2);
	break;
      case MKTERM:
	int ci = readIndex();
	int pi = readIndex();
	int ri = readIndex();
	instr = Format.literal("MKTERM c" + ci + ", r" + pi + " -> r" + ri);
	break;
      case MKSINGLE:
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("MKSINGLE r" + ri1 + " -> r" + ri2);
	break;
      case HOM:
	int hi = readIndex();
	int ri1 = readIndex();
	int ri2 = readIndex();
	instr = Format.literal("HOM h" + hi + " r" + ri1 + " -> r" + ri2);
	break;
      case MKEMPTY:
	int ri = readIndex();
	instr = Format.literal("MKEMPTY -> r" + ri);
	break;
      case MKUNIV:
	int ri = readIndex();
	instr = Format.literal("MKUNIV -> r" + ri);
	break;
      case ISECT:
	int ri1 = readIndex();
	int ri2 = readIndex();
	int ri3 = readIndex();
	instr = Format.literal("ISECT r" + ri1 + ", r " + ri2 +
			       " -> r" + ri3);
	break;
      case UNION:
	int ri1 = readIndex();
	int ri2 = readIndex();
	int ri3 = readIndex();
	instr = Format.literal("UNION r" + ri1 + ", r " + ri2 +
			       " -> r" + ri3);
	break;
      case APPLY:
	int ri1 = readIndex();
	int ri2 = readIndex();
	int ri3 = readIndex();
	instr = Format.literal("APPLY r" + ri1 + ", r" + ri2 +
			       " -> r" + ri3);
	break;
      case APPLYGLOBAL:
	int gi1 = readIndex();
	int ri2 = readIndex();
	int ri3 = readIndex();
	instr = Format.literal("APPLYGLOBAL g" + gi1 + ", r" + ri2 +
			       " -> r" + ri3);
	break;
      case IF:
	int ri = readIndex();
	int ti = readIndex();
	instr = Format.literal("IF r" + ri + ", " + (pc+ti));
	break;
      case IFNOT:
	int ri = readIndex();
	int ti = readIndex();
	instr = Format.literal("IFNOT r" + ri + ", " + (pc+ti));
	break;
      case GOTO:
	int ti = readIndex();
	instr = Format.literal("GOTO " + (pc+ti));
	break;
      case MKINTEN:
	int ii = readIndex();
	int pi = readIndex();
	int ri = readIndex();
	instr = Format.literal("MKINTEN s" + ii +
			       ", r" + pi + " -> r" + ri);
	break;
      case MKOUTERINTEN:
	int ii = readIndex();
	int ri = readIndex();
	instr = Format.literal("MKOUTERINTEN s" + ii + " -> r" + ri);
	break;
      case FAILURE:
	instr = Format.literal("FAILURE");
	break;
      case SUCCESS:
	instr = Format.literal("SUCCESS");
	break;
      case DEPTHFIRST:
	instr = Format.literal("DEPTHFIRST");
	break;
      default:
	instr = Format.literal("??? " + code[oldPc]);
      }
      instrs = instrs.append(
		 Format.append(Format.literal(oldPc + ":  "),
			       instr)
	       );
    }

    int readIndex(){
      int s = 0;
      for (;;){
	byte c = code[pc++];
	if ((c & 128) != 0)
	  return (s << 7) | (c & 127);
	else
	  s = (s << 7) | c;
      }
    }

  }
      


 
  /** Class for representing global variables. */
  public static class Global extends Term {
    public case Global(String name, boolean isExtern);

    public static Global read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      boolean isExtern = IOUtils.readBool(in);
      return new Global(name, isExtern);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeBool(out, isExtern);
    }

  }

  /** Class for representing constructors. */
  public static class Constructor extends Term {
    public case Constructor(String name, int arity);

    public static Constructor read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      int arity = IOUtils.readInt(in);
      return new Constructor(name, arity);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeInt(out, arity);
    }

  }

  /** Class for representing native functions. */
  public static class NativeFunc extends Term {
    public case NativeFunc(String name, int arity);

    public static NativeFunc read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      int arity = IOUtils.readInt(in);
      return new NativeFunc(name, arity);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeInt(out, arity);
    }
  }

  /** Class for representing native predicates. */
  public static class NativePred extends Term {
    public case NativePred(String name, int arity);

    public static NativePred read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      int arity = IOUtils.readInt(in);
      return new NativePred(name, arity);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeInt(out, arity);
    }
  }

  /** Class for representing native homomorphism. */
  public static class NativeHom extends Term {
    public case NativePred(String name);

    public static NativeHom read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      return new NativeHom(name);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
    }
  }
      

  /** Class for representing schemas. */
  public static class Schema extends Term {
    public case Schema(
		  String name,
		  String[] paramTab,
		  String[] varTab,
		  Binder binder,
		  Constraint[] constrs
		);

    public static Schema read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      int n = IOUtils.readInt(in);
      String[] paramTab = new String[n];
      for (int i = 0; i < n; i++){
	paramTab[i] = IOUtils.readString(in);
      }
      n = IOUtils.readInt(in);
      String[] varTab = new String[n];
      for (int i = 0; i < n; i++){
	varTab[i] = IOUtils.readString(in);
      }
      Binder binder = Binder.read(in);
      n = IOUtils.readInt(in);
      Constraint[] constrs = new Constraint[n];
      for (int i = 0; i < n; i++){
	constrs[i] = Constraint.read(in);
      }
      return new Schema(name, paramTab, varTab, binder, constrs);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeInt(out, paramTab.length);
      for (int i = 0; i < paramTab.length; i++){
	IOUtils.writeString(out, paramTab[i]);
      }
      IOUtils.writeInt(out, varTab.length);
      for (int i = 0; i < varTab.length; i++){
	IOUtils.writeString(out, varTab[i]);
      }
      binder.write(out);
      IOUtils.writeInt(out, constrs.length);
      for (int i = 0; i < constrs.length; i++){
	constrs[i].write(out);
      }
    }
  }

  /** Class for representing binders. */
  public static class Binder extends zeta.util.Term {
    public case BVar(int index);
    public case BTerm(int index, Binder[] args);

    public static Binder read(InputStream in) throws IOException {
      boolean isVar = IOUtils.readBool(in);
      if (isVar){
	int index = IOUtils.readInt(in);
	return new BVar(index);
      } else {
	int index = IOUtils.readInt(in);
	int count = IOUtils.readInt(in);
	Binder[] args = new Binder[count];
	for (int i = 0; i < count; i++){
	  args[i] = read(in);
	}
	return new BTerm(index, args);
      }
    }

    public void write(OutputStream out) throws IOException {
      switch (this){
      case BVar(int index):
	IOUtils.writeBool(out, true);
	IOUtils.writeInt(out, index);
	break;
      case BTerm(int index, Binder[] args):
	IOUtils.writeBool(out, false);
	IOUtils.writeInt(out, index);
	IOUtils.writeInt(out, args.length);
	for (int i = 0; i < args.length; i++){
	  args[i].write(out);
	}
      }
    }
  }

  /** Class for representing constraints. */
  public static class Constraint extends Term {
    public case Constraint(
		  String name, 
		  int regCount, 
		  int codeOffs
		);

    public static Constraint read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);
      int regCount = IOUtils.readInt(in);
      int codeOffs = IOUtils.readInt(in);
      return new Constraint(name, regCount, codeOffs);
    }

    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);
      IOUtils.writeInt(out, regCount);
      IOUtils.writeInt(out, codeOffs);
    }

  }

  
  /** Class for representing a ZAM Unit. */
  public static class Unit extends Term {
    public case Unit(
		  String name,
		  String[] imports,
		  Global[] globals,
		  Constructor[] constructors,
		  NativeFunc[] nativeFuncs,
		  NativePred[] nativePreds,
		  NativeHom[] nativeHoms,
		  String[] denotations,
		  int initInten,
		  Schema[] schemas,
		  byte[] code
		);

    /** Format a unit. */
    public Format toFormat(FormatInfo info){
      return
	Format.beneath(
	  new Format[]{
	    Format.literal("UNIT " + name),
	    fmtGroup("IMPORTS ", "u", imports),
	    fmtGroup("GLOBALS ", "g", globals),
	    fmtGroup("CONSTRUCTORS ", "c", constructors),
	    fmtGroup("NATIVEFUNCS ", "n", nativeFuncs),
	    fmtGroup("NATIVEPREDS ", "p", nativePreds),
	    fmtGroup("NATIVEHOMS ", "p", nativeHoms),
	    fmtGroup("DENOTATIONS ", "d", denotations),
	    Format.literal("INITSCHEMA s" + initInten),
	    fmtGroup("SCHEMAS ", "s", schemas),
	    Format.beneath(
	      Format.literal("CODE"),
	      Format.indent(formatCode(code,0,code.length))
	    )});
    }

    /** Format an array with indices. */
    private static <A> Format fmtGroup(String title, String prefix, A[] arr){
      Seq<Format> fmts = new BufferSeq();
      for (int i = 0; i < arr.length; i++){
	fmts = fmts.append(
		 Format.block(Format.literal(prefix + i + "=="),
			      Format.indent(Format.build(arr[i])))
	       );
      }
      return Format.beneath(
	       Format.literal(title),
	       Format.indent(
		 Format.beneath(fmts)
	       )
	     );
    }


    /** Read a unit (signature only). */
    public static Unit read(InputStream in) throws IOException {
      String name = IOUtils.readString(in);

      int n = IOUtils.readInt(in);
      String[] imports = new String[n];
      for (int i = 0; i < n; i++){
	imports[i] = IOUtils.readString(in);
      }

      n = IOUtils.readInt(in);
      Global[] globals = new Global[n];
      for (int i = 0; i < n; i++){
	globals[i] = Global.read(in);
      }

      n = IOUtils.readInt(in);
      Constructor[] constructors = new Constructor[n];
      for (int i = 0; i < n; i++){
	constructors[i] = Constructor.read(in);
      }

      n = IOUtils.readInt(in);
      NativeFunc[] nativeFuncs = new NativeFunc[n];
      for (int i = 0; i < n; i++){
	nativeFuncs[i] = NativeFunc.read(in);
      }

      n = IOUtils.readInt(in);
      NativePred[] nativePreds = new NativePred[n];
      for (int i = 0; i < n; i++){
	nativePreds[i] = NativePred.read(in);
      }

      n = IOUtils.readInt(in);
      NativeHom[] nativeHoms = new NativeHom[n];
      for (int i = 0; i < n; i++){
	nativeHoms[i] = NativeHom.read(in);
      }

      n = IOUtils.readInt(in);
      String[] denotations = new String[n];
      for (int i = 0; i < n; i++){
	denotations[i] = IOUtils.readString(in);
      }

      int codeSize = IOUtils.readInt(in);  // NB! 

      int initInten = IOUtils.readInt(in);
      n = IOUtils.readInt(in);
      Schema[] schemas = new Schema[n];
      for (int i = 0; i < n; i++){
	schemas[i] = Schema.read(in);
      }

      byte[] code = new byte[codeSize];
      int r = 0;
      while (r < n){
	int c = in.read(code, r, n-r);
	if (c < 0) throw new IOException("unexpected input");
	r += c;
      }
      
      return new Unit(name, imports, globals, constructors,
		      nativeFuncs, nativePreds, nativeHoms, denotations,
		      initInten, schemas, code);
    }
      
    /** Write a unit. */
    public void write(OutputStream out) throws IOException {
      IOUtils.writeString(out, name);

      IOUtils.writeInt(out, imports.length);
      for (int i = 0; i < imports.length; i++){
	IOUtils.writeString(out, imports[i]);
      }

      IOUtils.writeInt(out, globals.length);
      for (int i = 0; i < globals.length; i++){
	globals[i].write(out);
      }

      IOUtils.writeInt(out, constructors.length);
      for (int i = 0; i < constructors.length; i++){
	constructors[i].write(out);
      }

      IOUtils.writeInt(out, nativeFuncs.length);
      for (int i = 0; i < nativeFuncs.length; i++){
	nativeFuncs[i].write(out);
      }

      IOUtils.writeInt(out, nativePreds.length);
      for (int i = 0; i < nativePreds.length; i++){
	nativePreds[i].write(out);
      }

      IOUtils.writeInt(out, nativeHoms.length);
      for (int i = 0; i < nativeHoms.length; i++){
	nativeHoms[i].write(out);
      }

      IOUtils.writeInt(out, denotations.length);
      for (int i = 0; i < denotations.length; i++){
	IOUtils.writeString(out, denotations[i]);
      }

      IOUtils.writeInt(out, code.length); // NB!!


      IOUtils.writeInt(out, initInten);
      IOUtils.writeInt(out, schemas.length);
      for (int i = 0; i < schemas.length; i++){
	schemas[i].write(out);
      }

      out.write(code);
    }
		  
  }
  
  static class IOUtils {

    static void writeString(OutputStream out, String s) throws IOException {
      byte[] bytes = s.getBytes();
      writeInt(out, bytes.length);
      out.write(bytes);
    }

    static String readString(InputStream in) throws IOException {
      int n = readInt(in);
      byte[] bytes = new byte[n];
      in.read(bytes);
      return new String(bytes);
    }

    private static final byte[] wrbuf = new byte[12];

    static void writeInt(OutputStream out, int param) throws IOException {
      int i = 12;
      do {
	wrbuf[--i] = (byte)(param & 127);
	param >>= 7;
      }
      while (param != 0);
      wrbuf[11] |= 128;
      out.write(wrbuf,i,12-i);
    }

    static int readInt(InputStream in) throws IOException {
      int s = 0;
      for (;;){
	int c = in.read();
	if ((c & 128) != 0)
	  return (s << 7) | (c & 127);
	else
	  s = (s << 7) | c;
      }
    }

    static void writeBool(OutputStream out, boolean b) throws IOException {
      if (b) out.write(1); else out.write(0);
    }

    static boolean readBool(InputStream in) throws IOException {
      int b = in.read();
      return b != 0;
    }

  }
  
}
