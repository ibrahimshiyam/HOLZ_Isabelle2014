package zeta.tools.zchecker;

/**
 * The class Env holds all information belonging to the state of
 * a typecheck.
 *
 * @version $Id: Env.pizza,v 1.8 2000/07/06 09:18:24 wg Exp $
 */

import java.util.NoSuchElementException;

import net.sf.pizzacompiler.lang.Pair;

import zeta.agl.*;
import zeta.format.Format;

import zeta.util.*;
import zeta.session.*;
import zeta.content.zirp.*;

public class Env {

  // STRUCTURES

  /** 
   * The class of type actualizations.
   */
  public static class Instance extends Term {
    public case Instance(Expr type, Expr[] variables);
  }

  /**
   * The class of environment entries, holding information about a name.
   */
  public static class Entry {
    // FIXME: replace entry, remove Undefined case
    public case Defined(Name name, Locator locator, Seq<Name> genericity, 
			Expr type);
    public case Undefined(Name name);
  }

    
  // FIELDS

  /**
   * The diagnostics accumulated in this environment.
   */
  private Diag diag = new Diag();

   
  /**
   * The unit environment.
   */
  private final UnitEnv unitEnv;

  /**
   * A mapping of unit names to unit environments of enriched classes.
   */
  private final Map<Name,UnitEnv> enrichedEnvs;

  /**
   * The master thread waiting for checkers to terminate.
   */
  private Thread masterThread = null;

  /**
   * The current running checker thread.
   */
  private Thread currentChecker = null;

  /**
   * The checker threads which are waiting round-robin.
   */
  private Seq<Thread> waitingCheckers = new BufferSeq();

  /**
   * The checker threads suspended for name definitions; factorized by name.
   */
  private Map<Name,Seq<Thread>> suspendedCheckers = new HashMap();

  /**
   * The intention of checker threads for defining names; factorized by name.
   */
  private Map<Name,Seq<Thread>> intentionMap = new HashMap();


  /**
   * Information about checker threads.
   */
  private Map<Thread,CheckerInfo> checkerInfos = new HashMap();

  private static class CheckerInfo {
    private case CheckerInfo(Locator suspendedAt,
			     Set<Name> intendedDefs,
			     Set<Name> usage);
  }


  // CONSTRUCTION

  /**
   * Create a new environment based on the given unit environment.
   */
  private Env(UnitEnv unitEnv, Map<Name,UnitEnv> enrichedEnvs){
    this.unitEnv = unitEnv;
    this.enrichedEnvs = enrichedEnvs;
  }

  /**
   * Create a new environment for section checking, based
   * on the given unit environment which contains definitions for
   * all parent units.
   */
  public static Env sectionEnv(UnitEnv unitEnv){
    return new Env(unitEnv, new HashMap());
  }

  /**
   * Create a new environment for class checking, based
   * on the given unit environment which contains definitions for
   * all parent units, the array of environments belonging to
   * enriched classes, and formal parameters of the unit.
   */
  public static Env classEnv(UnitEnv unitEnv, UnitEnv[] enrichedEnvs,
				 Name[] formals){
    Map<Name,UnitEnv> eenvs = new HashMap();
    for (int i = 0; i < enrichedEnvs.length; i++){
      eenvs = eenvs.define(enrichedEnvs[i].getName(), enrichedEnvs[i]);
    }
    Env env = new Env(unitEnv, eenvs);
    Local lenv = env.newLocal();
    for (int i = 0; i < formals.length; i++){
      lenv.defineUnique(formals[i], unitEnv.getLocator(), 
			makePower(makeGiven(formals[i])));
    }
    lenv.makeGlobal(new ArraySeq());
    return env;
  }



  // DIAGNOSTICS

  /** 
   * Add diagnostics to environment.
   */
  public synchronized void addDiag(Locator locator,
				   Diag.Category category,
				   Format message){
    diag = diag.add(locator, category, message);
  }

  /** 
   * Get and clear diagnostics.
   */
  public synchronized Diag getAndClearDiag(){
    Diag d = diag;
    diag = new Diag();
    return d;
  }

  // UNIT ENVS

  /**
   * Get the unit environment embedded in this environment.
   */
  public UnitEnv getUnitEnv(){
    return unitEnv;
  }

  /**
   * Get the unit environment of enriched named class, or null,
   * if not existent.
   */
  public UnitEnv getEnrichedEnv(Name unitName){
    try {
      return enrichedEnvs.get(unitName);
    }
    catch (NoSuchElementException e){
      return null;
    }
  }
  


  // CHECKER THREADS, GLOBAL NAME DEFINITION AND LOOKUP

  /**
   * Register the given thread to be a checker working on this
   * environment. The thread is expected to be not started.  The
   * thread must call the method unregisterChecker() once it
   * terminates.  <p>
   *
   * The names which are (approximately) going to be defined by this
   * checker are passed as an argument. This information is used for
   * enhancing diagnostics for undeclared/cyclic declared names.  
   */
  public synchronized void registerChecker(Thread thread,
					   Set<Name> intendedDefs){
    checkerInfos = checkerInfos.define(thread,
				       new CheckerInfo(null,
						       intendedDefs,
						       new HashSet()));
    waitingCheckers = waitingCheckers.append(thread);
    intendedDefs.apply(
      fun (Name n)->void {
	try {
	  intentionMap = 
	    intentionMap.define(n, intentionMap.get(n).append(thread));
	}
	catch (NoSuchElementException e){
	  intentionMap = 
	    intentionMap.define(n, new ArraySeq(thread));
	}
      }
    );
  }

  /**
   * Run the registered checker threads until all are terminated.
   */
  public synchronized void runCheckers(){
    if (waitingCheckers.size() > 0){
      masterThread = Thread.currentThread();
      runNext();
      try {
	wait(); 
      }
      catch (InterruptedException e){
	throw FatalError.unexpectedCase("checker master interrupted");
      }
    }
  }

  /** Run the next waiting thread. */
  private synchronized void runNext(){
    Thread next = waitingCheckers.head();
    waitingCheckers = waitingCheckers.tail();
    if (!next.isAlive())
      next.start();
    else {
      CheckerInfo info = checkerInfos.get(next);
      synchronized (info) {
	info.notify();
      }
    }
  }

  /**
   * Unregister the running thread as a checker working on
   * this environment. Returns the set of global names lookuped
   * by this thread.
   */
  public synchronized Set<Name> unregisterChecker(){
    Thread self = Thread.currentThread();
    CheckerInfo info = checkerInfos.get(self);
    // checkerInfos = checkerInfos.undefine(self);
    if (waitingCheckers.size() == 0 && suspendedCheckers.size() > 0){
      // deadlock/cycle. 
      handleDeadlock();
    }
    if (waitingCheckers.size() == 0){
      // resume master thread now
      notify();
    } else {
      // resume the next checker in waiting list
      runNext();
    }
    return info.usage;
  }

  /**
   * Handle a deadlock, by awaking appropriate suspended thread(s)
   * and declaring the names they are waiting for to be undefined.
   */
  private synchronized void handleDeadlock(){
    // strategy: build the maximal strong components of name dependencies
    // according to usage and intentions, and resolve
    // the lowest cycle.

    Map<Name,Set<Name>> graph = new HashMap();
    suspendedCheckers.apply(
      fun (Pair<Name,Seq<Thread>> p)->void {
	if (!graph.defines(p.fst))
	  graph = graph.define(p.fst, new HashSet());
	p.snd.apply(
	  fun (Thread checker)->void {
	    CheckerInfo info = checkerInfos.get(checker);
	    info.intendedDefs.apply(
	      fun (Name n)->void {
		try {
		  graph = graph.define(n, graph.get(n).include(p.fst));
		}
		catch (NoSuchElementException e){
		  graph = graph.define(n, new HashSet().include(p.fst));
		}
	      }
	    );
	  }
	);
      }
    );
    Seq<Seq<Name>> msc = MaxStrongComp.msc(graph);
    Seq<Name> cycle = msc.head();
    if (cycle.size() <= 1){
      // a simple undefined name
      Name name = cycle.head();
      Seq<Locator> locs =
	suspendedCheckers.get(name).map(
	  fun (Thread t)->Locator {
	    return checkerInfos.get(t).suspendedAt;
	  }
	);
      addDiag(locs.head(),
	      Diag.Category.Error,
	      Report.undeclared(name, locs.tail()));
      // define the name (awaking suspended threads)
      define(name, locs.head(), new ArraySeq(), Type.anyType);
    } else {
      // a real cycle
      Seq<Locator> locs = new BufferSeq();
      cycle.apply(
	fun (Name n)->void {
	  suspendedCheckers.get(n).apply(
	    fun (Thread t)->void {
	      locs = locs.append(checkerInfos.get(t).suspendedAt);
	    }
	  );
	}
      );
      addDiag(locs.head(),
	      Diag.Category.Error,
	      Report.cyclic(cycle, locs.tail()));
      // define the names (awaking suspended threads)
      cycle.apply(
	fun (Name n)->void {
	  define(n, locs.head(), new ArraySeq(), Type.anyType);
	}
      );
    }
  }

  /**
   * Define the given name in the global environment. 
   *
   * If the name is already defined, type compatibility
   * with the older definition will be checked, and 
   * diagnostics may be produced. 
   * 
   * If threads are waiting for the definition of the given name they
   * will be resumed.
   */
  public synchronized 
  void define(Name name, Locator locator, Seq<Name> genericity, Expr type){
    // System.out.println("define global " + name);
    unitEnv.declareConstant(locator, name, genericity.toArray(Name.class),
			    type);
    diag = diag.combine(unitEnv.getAndClearDiag());

    // awake threads waiting for this definition
    try {
      Seq<Thread> suspended = suspendedCheckers.get(name);
      suspendedCheckers = suspendedCheckers.undefine(name);
      waitingCheckers = waitingCheckers.appendAll(suspended);
    }
    catch (NoSuchElementException e){}
  }

  /**
   * Get the definition of the given name in the global environment. 
   *
   * If the name is not yet defined, the calling thread will wait
   * until its definition.
   *
   * @see lookup
   */
  public Entry get(Name name, Locator at) {
    // System.out.println("get global " + name);
    Thread self = Thread.currentThread();
    CheckerInfo cinfo;
    try { 
       cinfo = checkerInfos.get(self);
    }
    catch (NoSuchElementException e){
      // self not registered as a checker thread -- assume no threads are
      // running
      UnitEnv.ConstantInfo info = unitEnv.getConstant(name);
      if (info != null){
	return Entry.Defined(info.name, info.locator,
			     new ArraySeq(info.generics),
			     info.type);
      } else {
	addDiag(at,
		Diag.Category.Error,
		Report.undeclared(name, new ArraySeq()));
	return Entry.Defined(name, at, new ArraySeq(), Type.anyType);
      }
    }
    // begin parallel lookup mode
    synchronized (cinfo) {
      synchronized (this) {
	// account usage
	cinfo.usage = cinfo.usage.include(name);

	// look for definition in unit environment
	UnitEnv.ConstantInfo info = unitEnv.getConstant(name);
	if (info != null){
	  return Entry.Defined(info.name, info.locator,
			       new ArraySeq(info.generics),
			       info.type);
	} else {

	  // suspend to wait for definition
	  cinfo.suspendedAt = at;
	  if (suspendedCheckers.defines(name)){
	    suspendedCheckers = 
	      suspendedCheckers.define(name,
				       suspendedCheckers.get(name)
							.append(self));
	  } else {
	    suspendedCheckers = 
	      suspendedCheckers.define(name, new BufferSeq().append(self));
	  }
	  
	  if (waitingCheckers.isEmpty()){
	    // handle a deadlock, by defining some names
	    handleDeadlock();
	    info = unitEnv.getConstant(name);
	    if (info != null){
	      // the deadlock handler has defined our name;
	      // continue immediatly (must remove self from waiting list)
	      waitingCheckers = 
		waitingCheckers.filter(fun (Thread t)->boolean{
					 return t != self;
				       });
	      return Entry.Defined(info.name, info.locator,
				   new ArraySeq(info.generics),
				   info.type);
	    }
	  }
	  // activate the next thread
	  runNext();
	}
      }
      try {
	cinfo.wait();
      }
      catch (InterruptedException e){
	throw FatalError.unexpectedCase("checker thread interrupted");
      }
      // System.out.println(self + " resumed for " + name);

      synchronized (this) {
	UnitEnv.ConstantInfo info = unitEnv.getConstant(name);
	if (info != null){
	  return Entry.Defined(info.name, info.locator,
			       new ArraySeq(info.generics),
			       info.type);
	} else {
	  // this must not happen
	  throw FatalError.unexpectedCase(
		  "name still not defined for resumed checker thread");
	}
      }
    }
  }
      
  /**
   * Marke the given global name to be used in this context.
   */
  public void markUsed(Name name) {
    // System.out.println("get global " + name);
    Thread self = Thread.currentThread();
    CheckerInfo cinfo;
    try { 
       cinfo = checkerInfos.get(self);
    }
    catch (NoSuchElementException e){
      // self not registered as a checker thread -- assume no threads are
      // running
      return;
    }
    // begin parallel lookup mode
    synchronized (cinfo) {
      synchronized (this) {
	// account usage
	cinfo.usage = cinfo.usage.include(name);
      }
    }
  }



  // LOCAL ENVIRONMENTS

  /**
   * Create a new local environment embedding the given global
   * environment.
   */
  public Local newLocal(){
    return new Local();
  }

  /**
   * The class of local environments. A local environment extends
   * a global environment by the possibility to open and close local
   * scopes. 
   */
  public class Local {

    /*
     * The current (topmost) scope.
     */
    private Map<Name,Entry> current = new HashMap();

    /*
     * The stack of outer scopes.
     */
    private Seq<Map<Name,Entry>> outer = new BufferSeq();

    /*
     * Return the global environment embedded in this local environment.
     */
    public Env global(){
      return Env.this;
    }

    /*
     * Add diagnostics to the embedded global environment.
     */
    public void addDiag(Locator loc, Diag.Category category, Format msg){
      Env.this.addDiag(loc, category, msg);
    }

    /** 
     * Return the set of all names defined in the current scope.
     */
    public Set<Name> getDefinedNames(){
      return current.domain();
    }

    /**
     * Get the definition of name in the current scope, or null,
     * if no definition.
     */
    public Entry.Defined get(Name name){
      try {
	return (Entry.Defined)current.get(name);
      }
      catch (NoSuchElementException e){
	return null;
      }
    }

    /** 
     * Define the given local name in the innermost scope of this local
     * environment. If a definition of this name already exists, it
     * will be checked for compatibility, and diagnostics may be
     * produced. 
     */
    public void define(Name name, Locator loc, Expr type){
      try {
	Entry old = current.get(name);
	switch (old) {
	case Defined(Name name1, Locator loc1, _, Expr type1):
	  checkRedeclaration(name,
			     loc, loc1, new ArraySeq(), new ArraySeq(),
			     type, type1);
	  return;
	}
      }
      catch (NoSuchElementException e){}
      current = current.define(name, 
			       new Entry.Defined(name, loc,
						 new ArraySeq(),
						 type));
    }

    /** 
     * Define the given local name in the innerest scope of this local
     * environment. If a definition for the name already exists,
     * diagnostics will be produced.
     */
    public void defineUnique(Name name, Locator loc, Expr type){
      try {
	Entry old = current.get(name);
	switch (old) {
	case Defined(_, Locator loc1, _, _):
	  addDiag(loc, Diag.Category.Error,
		  Report.redeclaration(name, loc));
	  return;
	}
      }
      catch (NoSuchElementException e){}
      current = current.define(name, 
			       new Entry.Defined(name, loc,
						 new ArraySeq(),
						 type));
    }
      
    /** 
     * Open a new (empty) scope. Future defines will be addressed
     * to the newly opened scope. For lookups, names defined in
     * more recent opened scopes shadow names in outer scopes.
     * One scope is opened by default in a newly created local
     * environment.
     */
    public void open(){
      outer = outer.prepend(current);
      current = new HashMap();
    }
    
    
    /** 
     * Close the last opened scope.
     */
    public void close(){
      current = outer.head();
      outer = outer.tail();
    }

    /** 
     * Make a signature of the definitions in the current scope. 
     */
    public Expr.Signature makeSignature(){
      Name[] names = new Name[current.size()];
      Expr[] types = new Expr[names.length];
      int i = 0;
      current.apply(
	fun (Pair<Name,Entry> p)->void {
	  switch (p.snd) {
	  case Defined(Name name, Locator loc, _, Expr type):
	    // System.out.println("define " + name);
	    names[i] = name;
	    types[i] = type;
	    i++;
	  }
	}
      );
      return Env.makeSignature(names, types);
    }

    /** 
     * Commit the definitions in the current scope to be members
     * of the global scope. Each definition is augmented by the
     * given generics.
     */
    public void makeGlobal(Seq<Name> generics){
      current.apply(
	fun (Pair<Name,Entry> p)->void {
	  switch (p.snd) {
	  case Defined(Name name, Locator loc, _, Expr type):
	    // System.out.println("define " + name);
	    Env.this.define(name, loc, generics, type);
	  }
	}
      );
    }

    /**
     * Lookup a name in the local environment and return its type
     * instance. Local scopes are tried out innermost-out, finally
     * the global environment is consulted. An "undeclared" error
     * is generated if no definition is found. If the name is generic, 
     * an instance with fresh type variables will be generated. 
     */
    public Instance lookup(Name name, Locator loc){
      try {
	Entry entry = current.get(name);
	switch (entry) {
	case Defined(_, _, _, Expr type):
	  return new Instance(type, new Expr[0]);
	}
      }
      catch (NoSuchElementException e){}
      for (int i = 0; i < outer.size(); i++){
	try {
	  Entry entry = outer.at(i).get(name);
	  switch (entry) {
	  case Defined(_, _, _, Expr type):
	    return new Instance(type, new Expr[0]);
	  }
	}
	catch (NoSuchElementException e){}
      }
      Entry entry = Env.this.get(name, loc);
      switch (entry){
      case Defined(_, _, Seq<Name> generics, Expr type):
	if (generics.isEmpty())
	  return new Instance(type, new Expr[0]);
	else {
	  Map<Name,Expr> subs = new HashMap();
	  Seq<Expr> acts = new BufferSeq();
	  generics.apply(
	    fun (Name n)->void {
	      Expr var = makeVar(new Name("%" + n.toString()));
	      acts = acts.append(var);
	      subs = subs.define(n, var);
	    }
	  );
	  return new Instance(substitute(type, subs), 
			      acts.toArray(Expr.class));
	}
      default:
	throw FatalError.unexpectedCase();
      }
    }

  } // end class Local


  // AUXILIARIES

  /**
   * Check for compatible redeclaration of name.
   */
  private void checkRedeclaration(Name name, 
				  Locator loc, Locator oldOrig,
				  Seq<Name> generics, Seq<Name> oldGenerics,
				  Expr type, Expr oldExpr){
    if (generics.size() != oldGenerics.size()){
      addDiag(loc,
	      Diag.Category.Error,
	      Report.redeclarationIncompatGenerics(name, oldOrig,
						     oldGenerics, generics));
    } else {
      if (generics.size() > 0){
	// perform alpha conversion
	type =
	  substitute(type,
		     new HashMap().defineAll(generics, 
					     oldGenerics.map(makeGiven))
		    );
      }
      // check compatibility
      try {
	Type.unify(oldExpr, type);
      }
      catch (Type.UnificationFailure e){
	addDiag(loc,
		Diag.Category.Error,
		Report.redeclarationIncompatExprs(name, oldOrig,
						    oldExpr, type, e));
      }
    }
  }

  /**
   * Substitute name in type expression.
   */
  public Expr substitute(Expr expr, Map<Name, Expr> subs){
    Expr newExpr = new Substitutor(subs).visit(expr);
    return newExpr != null ? newExpr : expr;
  }

  /**
   * Substitute names in array of type expression.
   */
  public Expr[] substitute(Expr[] exprs, Map<Name, Expr> subs){
    Expr[] newExprs = new Substitutor(subs).visit(exprs);
    return newExprs != null ? newExprs : exprs;
  }
  
  /** 
   * Term visitor class for substitution. 
   */
  private static class Substitutor extends TermVisitor {
    private final Map<Name,Expr> subs;

    Substitutor(Map<Name,Expr> subs){
      this.subs = subs;
    }
    public Expr visit(Expr.Variable expr){
      try {
	return subs.get(expr.name.name);
      } catch (NoSuchElementException e){
	return super.visit(expr);
      }
    }
  }

  /** 
   * Make a given type of according name.
   */
  public static Expr makeGiven(Name name){
    return Type.makeGiven(name);
  }

  /** 
   * Make a generic given type of according name.
   */
  public static Expr makeGenGiven(Name name, Seq<Expr> actuals){
    return Type.makeGenGiven(name, actuals.toArray(Expr.class));
  }

  /** 
   * Make a free type variable. The given name has only descriptive
   * purposes in error messages.
   */
  public static Expr makeVar(Name name){
    return Type.makeVar(name);
  }

  /** 
   * Make a powerset type.
   */
  public static Expr makePower(Expr elemType){
    return Type.makePower(elemType);
  }

  /** 
   * Make a product type.
   */
  public static Expr makeProduct(Expr[] elemTypes){
    return Type.makeProduct(elemTypes);
  }

  /** 
   * Make a signature type.
   */
  public static Expr.Signature makeSignature(Name[] names, Expr[] types){
    sort(names, types, 0, names.length-1);
    return (Expr.Signature)Type.makeSignature(names, types);
  }

  private static void sort(Name[] names, Expr[] types, int fst, int lst){
    if (fst >= lst) return;
    String pivot = names[fst].getRepr();
    int i = fst-1;
    int j = lst+1;
    while (i < j){
      while (pivot.compareTo(names[++i].getRepr()) > 0);
      while (pivot.compareTo(names[--j].getRepr()) < 0);
      if (i < j){
	Name tname = names[i];
	Expr ttype = types[i];
	names[i] = names[j];
	types[i] = types[j];
	names[j] = tname;
	types[j] = ttype;
      }
    }
    sort(names, types, fst, j);
    sort(names, types, j+1, lst);
  }

  /**
   * The type used for denotations.
   */
  public static Expr denotationType =
    makeGiven(ZNames.denotation);
				      


  // UNIFICATION

  /**
   * Unify the two types. Produce diagnostics if unification fails.
   */
  public void unify(Locator loc, Expr type1, Expr type2){
    try {
      Type.unify(type1, type2);
    }
    catch (Type.UnificationFailure e){
      addDiag(loc,
	      Diag.Category.Error,
	      Report.typeIncompat(type1, type2, e));
    }
  }
  
}
    
