package zeta.tools.zparser;

/** 
 * Auxiliary functions for parsing.
 *
 * @version $Id: ParserAux.pizza,v 1.2 1998/09/06 15:28:08 wg Exp $
 */

import java.util.Vector;

import zeta.util.*;
import zeta.session.*;
import zeta.content.text.*;
import zeta.content.zirp.*;

class ParserAux {

  /** 
   * Build the characteristic tuple of a schema expression. 
   */
  static Expr characteristicTuple(Expr expr){
    Vector v = new Vector();
    switch (expr) {
    case Text(Expr.Decl[] decls, _):
      for (int i = 0; i < decls.length; i++){
	switch (decls[i]){
	case Direct(NameDecl[] names, _):
	  for (int j = 0; j < names.length; j++){
	    NameAppl nap = new NameAppl(names[j].name, new Expr[0]);
	    Locator loc = Locator.get(names[j].an);
	    Locator.put(nap.an, loc);
	    Expr var = Expr.Variable(nap);
	    Locator.put(var.an, loc);
	    v.addElement(var);
	  }
	  break;
	case Eqn(NameDecl name, _):
	  NameAppl nap = new NameAppl(name.name, new Expr[0]);
	  Locator loc = Locator.get(name.an);
	  Locator.put(nap.an, loc);
	  Expr var = Expr.Variable(nap);
	  Locator.put(var.an, loc);
	  v.addElement(var);
	  break;
	case Inclusion(Expr schema):
	  Expr theta = Expr.Unary(Expr.UnaryKind.Theta, schema);
	  Locator.put(theta.an, Locator.get(schema.an));
	  v.addElement(theta);
	}
      }
      break;
    default:
      Expr theta = Expr.Unary(Expr.UnaryKind.Theta, expr);
      Locator.put(theta.an, Locator.get(expr.an));
      v.addElement(theta);
    }
    Expr[] exprs = new Expr[v.size()];
    v.copyInto(exprs);
    switch (exprs.length){
    case 0:
      Expr res = Expr.Binding(new Expr.Decl.Eqn[0]);
      Locator.put(res.an, Locator.get(expr.an));
      return res;
    case 1:
      return exprs[0];
    default:
      Expr res = Expr.Tuple(exprs);
      Locator.put(res.an, 
		 ItemParser.upto(Locator.get(exprs[0].an),
			      Locator.get(exprs[exprs.length-1].an)));
      return res;
    }
  }

}
